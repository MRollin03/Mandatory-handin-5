// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: pb/ActionHouse.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Actionhouse_Bid_FullMethodName    = "/mandatory5.Actionhouse/Bid"
	Actionhouse_Status_FullMethodName = "/mandatory5.Actionhouse/Status"
	Actionhouse_Result_FullMethodName = "/mandatory5.Actionhouse/Result"
)

// ActionhouseClient is the client API for Actionhouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionhouseClient interface {
	Bid(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Acknowledge, error)
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Current, error)
	Result(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Outcome, error)
}

type actionhouseClient struct {
	cc grpc.ClientConnInterface
}

func NewActionhouseClient(cc grpc.ClientConnInterface) ActionhouseClient {
	return &actionhouseClient{cc}
}

func (c *actionhouseClient) Bid(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Acknowledge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Acknowledge)
	err := c.cc.Invoke(ctx, Actionhouse_Bid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionhouseClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Current, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Current)
	err := c.cc.Invoke(ctx, Actionhouse_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionhouseClient) Result(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Outcome, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Outcome)
	err := c.cc.Invoke(ctx, Actionhouse_Result_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionhouseServer is the server API for Actionhouse service.
// All implementations must embed UnimplementedActionhouseServer
// for forward compatibility.
type ActionhouseServer interface {
	Bid(context.Context, *Request) (*Acknowledge, error)
	Status(context.Context, *emptypb.Empty) (*Current, error)
	Result(context.Context, *emptypb.Empty) (*Outcome, error)
	mustEmbedUnimplementedActionhouseServer()
}

// UnimplementedActionhouseServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActionhouseServer struct{}

func (UnimplementedActionhouseServer) Bid(context.Context, *Request) (*Acknowledge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedActionhouseServer) Status(context.Context, *emptypb.Empty) (*Current, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedActionhouseServer) Result(context.Context, *emptypb.Empty) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedActionhouseServer) mustEmbedUnimplementedActionhouseServer() {}
func (UnimplementedActionhouseServer) testEmbeddedByValue()                     {}

// UnsafeActionhouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionhouseServer will
// result in compilation errors.
type UnsafeActionhouseServer interface {
	mustEmbedUnimplementedActionhouseServer()
}

func RegisterActionhouseServer(s grpc.ServiceRegistrar, srv ActionhouseServer) {
	// If the following call pancis, it indicates UnimplementedActionhouseServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Actionhouse_ServiceDesc, srv)
}

func _Actionhouse_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionhouseServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actionhouse_Bid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionhouseServer).Bid(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actionhouse_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionhouseServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actionhouse_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionhouseServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actionhouse_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionhouseServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Actionhouse_Result_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionhouseServer).Result(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Actionhouse_ServiceDesc is the grpc.ServiceDesc for Actionhouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Actionhouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mandatory5.Actionhouse",
	HandlerType: (*ActionhouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bid",
			Handler:    _Actionhouse_Bid_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Actionhouse_Status_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _Actionhouse_Result_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/ActionHouse.proto",
}
